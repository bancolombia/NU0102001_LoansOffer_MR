# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

name: $(Build.SourceBranchName).$(date:yyyyMMdd)$(rev:.r)

variables:
  - name: 'artifactory.Repository'
    value: 'build-NU0102001_LoansOffer/$(NU)/$(projectName)/$(componentName)'
  - name: 'componentName'
    value: 'ms_utilities'
  - name: 'NU'
    value: 'NU0102001'
  - name: 'projectName'
    value: 'utilities'
  - name: 'artifactName'
    value: 'utilities'
  - name: 'reactiveWeb'
    value: 'infrastructure/entry-points/reactive-web'
  - name: 'reactiveRestConsumer'
    value: 'infrastructure/driven-adapters/rest-consumer'
  - name: 'model'
    value: 'domain/model'
  - name: 'usecase'
    value: 'domain/usecase'
  - name: 'appService'
    value: 'applications/app-service'
  - name: 'source'
    value: 'src/main/java'
  - name: 'sourceTestJava'
    value: 'src/test/java'
  - name: 'sourceTest'
    value: 'build/test-results/test'
  - name: 'sourceJacoco'
    value: 'build/jacoco/test.exec'
  - name: 'sourceBinaries'
    value: 'build/classes'

resources:
  - repo: self

trigger:
  branches:
    include:
      - trunk
  paths:
    include:
      - 'ms_utilities/*'

jobs:
  - job: BuildJob
    displayName: 'Build'
    pool:
      name: Build
      demands:
        - java
    steps:
      - task: SonarQubePrepare@4
        displayName: 'Prepare analysis on SonarQube'
        inputs:
          SonarQube: SonarQube
          scannerMode: CLI
          configMode: manual
          cliProjectKey: $(NU)_$(projectName)_$(componentName)
          cliProjectName: $(NU)_$(projectName)_$(componentName)
          cliProjectVersion: $(Build.BuildNumber)
          cliSources: $(componentName)
          extraProperties: |
            sonar.projectKey=$(NU)_$(projectName)_$(componentName)
            sonar.projectName=$(NU)_$(projectName)_$(componentName)
            sonar.project.version=$(Build.BuildNumber)
            sonar.branch.name=$(Build.SourceBranchName)
            sonar.sourceEncoding=UTF-8
            sonar.exclusions=**/*Test.java, **/*Factory.java,**/*DTO.java, **/*Log.java,**/*Data.java,**/*Util.java, **/*Mapper.java, **/*DataRepository.java,**/*Repository*.java, **/Logger*.java,**/Log*.java, **/*Config*.java, **/*Filter*.java
            sonar.sources=$(System.DefaultWorkingDirectory)/$(componentName)/$(model)/$(source),$(System.DefaultWorkingDirectory)/$(componentName)/$(usecase)/$(source),$(System.DefaultWorkingDirectory)/$(componentName)/$(reactiveWeb)/$(source),$(System.DefaultWorkingDirectory)/$(componentName)/$(reactiveRestConsumer)/$(source),$(System.DefaultWorkingDirectory)/$(componentName)/$(appService)/$(source)
            sonar.junit.reportPaths=$(System.DefaultWorkingDirectory)/$(componentName)/$(usecase)/$(sourceTest),$(System.DefaultWorkingDirectory)/$(componentName)/$(reactiveWeb)/$(sourceTest),$(System.DefaultWorkingDirectory)/$(componentName)/$(reactiveRestConsumer)/$(sourceTest)
            sonar.tests=$(System.DefaultWorkingDirectory)/$(componentName)/$(usecase)/$(sourceTestJava),$(System.DefaultWorkingDirectory)/$(componentName)/$(reactiveWeb)/$(sourceTestJava),$(System.DefaultWorkingDirectory)/$(componentName)/$(reactiveRestConsumer)/$(sourceTestJava)
            sonar.jacoco.reportPaths=$(System.DefaultWorkingDirectory)/$(componentName)/$(usecase)/$(sourceJacoco),$(System.DefaultWorkingDirectory)/$(componentName)/$(reactiveWeb)/$(sourceJacoco),$(System.DefaultWorkingDirectory)/$(componentName)/$(reactiveRestConsumer)/$(sourceJacoco)
            sonar.java.source=1.8
            sonar.java.binaries=$(System.DefaultWorkingDirectory)/$(componentName)/$(model)/$(sourceBinaries),$(System.DefaultWorkingDirectory)/$(componentName)/$(usecase)/$(sourceBinaries),$(System.DefaultWorkingDirectory)/$(componentName)/$(reactiveWeb)/$(sourceBinaries),$(System.DefaultWorkingDirectory)/$(componentName)/$(reactiveRestConsumer)/$(sourceBinaries),$(System.DefaultWorkingDirectory)/$(componentName)/$(appService)/$(sourceBinaries)
            sonar.coverage.jacoco.xmlReportPaths=$(System.DefaultWorkingDirectory)/$(componentName)/build/reports/jacocoMergedReport/jacocoMergedReport.xml
            sonar.coverage.exclusions=$(model)/**,$(appService)/**

      - task: Gradle@2
        displayName: 'Compilación y ejecución de pruebas unitarias'
        inputs:
          workingDirectory: '$(componentName)'
          gradleWrapperFile: '$(componentName)/gradlew'
          tasks: 'clean build jacocoMergedReport'
          testResultsFiles: '**/build/test-results/test/TEST-*.xml'

      - task: SonarQubeAnalyze@4
        displayName: 'Run Code Analysis'

      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage'
        inputs:
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/$(componentName)/build/reports/jacocoMergedReport/jacocoMergedReport.xml'

      - task: Sonar-buildbreaker@8
        displayName: 'Break Build on Quality Gate Failure'
        inputs:
          SonarQube: SonarQube

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact'
        inputs:
          PathtoPublish: $(componentName)/applications/app-service/build/libs
          ArtifactName: '$(artifactName)'
          publishLocation: 'Container'
          condition: and(succeeded(), eq(variables['Build.SourceBranch'],'refs/heads/trunk'))

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Dockerfile'
        inputs:
          PathtoPublish: $(componentName)/deployment/Dockerfile
          ArtifactName: '$(artifactName)'
          publishLocation: 'Container'
          condition: and(succeeded(), eq(variables['Build.SourceBranch'],'refs/heads/trunk'))

      - task: PublishBuildArtifacts@1
        displayName: 'Publish k8'
        inputs:
          PathtoPublish: $(componentName)/deployment/k8
          ArtifactName: 'k8'
          publishLocation: 'Container'
          condition: and(succeeded(), eq(variables['Build.SourceBranch'],'refs/heads/trunk'))

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Acceptance Test'
        inputs:
          PathtoPublish: $(componentName)/deployment/test/AcceptanceTest
          ArtifactName: 'acceptance_test'
          publishLocation: 'Container'
          condition: and(succeeded(), eq(variables['Build.SourceBranch'],'refs/heads/trunk'))

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Security-Test'
        inputs:
          PathtoPublish: $(componentName)/Security-E2E
          ArtifactName: 'Security-Test'
          publishLocation: 'Container'
          condition: and(succeeded(), eq(variables['Build.SourceBranch'],'refs/heads/trunk'))

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Modular-Test'
        inputs:
          PathtoPublish: $(componentName)/PerformanceTest
          ArtifactName: 'Modular-Test'
          publishLocation: 'Container'
          condition: and(succeeded(), eq(variables['Build.SourceBranch'],'refs/heads/trunk'))

  - job: CierreVulnerabilidadesJob
    displayName: 'Cierre de vulnerabilidades'
    pool:
      name: DevOpsPE-Seguridad
    steps:

      - task: codeAnalysis@3
        displayName: 'codeAnalysis for Utilities'
        inputs:
          id: '$(id_asserts)'
          secret: '$(secret_asserts)'
          cwd: './'
          subFolder: 'ms_utilities'
          mode: 'true'
          test: 'static'
        enabled: false